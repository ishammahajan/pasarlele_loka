def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesDebug = new Properties()
def keystorePropertiesFileDebug = rootProject.file('key-debug.properties')
if (keystorePropertiesFileDebug.exists()) {
   keystorePropertiesDebug.load(new FileInputStream(keystorePropertiesFileDebug))
}

def keystorePropertiesRelease = new Properties()
def keystorePropertiesFileRelease = rootProject.file('key-release.properties')
if (keystorePropertiesFileRelease.exists()) {
   keystorePropertiesRelease.load(new FileInputStream(keystorePropertiesFileRelease))
}

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }
   
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.thewhirringmechanic.pasarleleloka"
        minSdkVersion 18
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true 
    }

    signingConfigs {
        release {
            keyAlias keystorePropertiesRelease['keyAlias']
            keyPassword keystorePropertiesRelease['keyPassword']
            storeFile keystorePropertiesRelease['storeFile'] ? file(keystorePropertiesRelease['storeFile']) : null
            storePassword keystorePropertiesRelease['storePassword']
        }
        debug {
            keyAlias keystorePropertiesDebug['keyAlias']
            keyPassword keystorePropertiesDebug['keyPassword']
            storeFile keystorePropertiesDebug['storeFile'] ? file(keystorePropertiesDebug['storeFile']) : null
            storePassword keystorePropertiesDebug['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

apply plugin: 'com.google.gms.google-services'
